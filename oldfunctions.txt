//obtain magnitude of AC source
double get_AC_magnitude(std::string ac_param){
    std::string magnitude;

    magnitude = std::to_string(extract_double(ac_param)) + ac_param[ac_param.size()-1];

    return prefix_convertor(magnitude);
}
//this function can be eliminated by allowing prefix convertor to filter out the bracket

//ignore input source but convert other sources into short circuit
//function no longer needed
std::vector<ImpedanceDevice*> superposition(int input_source_index, std::vector<Source*> smallsig_sources, std::vector<ImpedanceDevice*> impedances){
    ImpedanceDevice* tmp;

    for(int i = 0; i < smallsig_sources.size(); i++){

        if((smallsig_sources[i]->get_type() == "AC V" || smallsig_sources[i]->get_type() == "DC V") && i != input_source_index){
            tmp = new Resistor(smallsig_sources[i]->give_nodeinfo().x, smallsig_sources[i]->give_nodeinfo().y, 0.001);
            impedances.push_back(tmp);
        }
        // edited to support DC analysis
    }

    return impedances;
}


//determine if resistor is parallel to the source
//function no longer needed
bool detect_parallel_id(ImpedanceDevice* id, Source* source){
    if((id->give_nodeinfo().x == source->give_nodeinfo().x) && (id->give_nodeinfo().y == source->give_nodeinfo().y)){
        return true;
    }
    else if((id->give_nodeinfo().x == source->give_nodeinfo().y) && (id->give_nodeinfo().y == source->give_nodeinfo().x)){
        return true;
    }

    return false;
}